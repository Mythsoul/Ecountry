generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

model User {
  id          String     @id @default(uuid())
  email       String     @unique
  username    String     @unique
  password    String
  verifyCode  String?
  verifyToken String?
  isVerified  Boolean    @default(false)
  resetCode   String?
  resetCodeExpiry DateTime?
  verificationCodeExpiry DateTime?
  verificationTokenExpiry DateTime?
  createdAt   DateTime   @default(now())
  character   Character?
  bank        BankAccount?
  jobs        Job[]
  inventory   InventoryItem[]
  houses      House[]
  sessions    Session[]
  refreshTokens RefreshToken[]  
}

model Character {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  name       String
  gender     String
  avatarUrl  String?
  x          Float    @default(0)
  y          Float    @default(0)
}

model House {
  id        String   @id @default(uuid())
  location  String
  price     Float
  status    HouseStatus
  ownerId   String?
  owner     User?    @relation(fields: [ownerId], references: [id])
}

enum HouseStatus {
  AVAILABLE
  OWNED
  RENTED
}

model BankAccount {
  id       String   @id @default(uuid())
  userId   String   @unique
  balance  Float    @default(0)
  user     User     @relation(fields: [userId], references: [id])
}

model Job {
  id         String     @id @default(uuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  type       String
  isActive   Boolean    @default(false)
  startedAt  DateTime?
  endedAt    DateTime?
  earnings   Float      @default(0)
}

model InventoryItem {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  itemName  String
  quantity  Int      @default(1)
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  socketId  String
  isOnline  Boolean  @default(true)
  lastSeen  DateTime @default(now())
}


model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  tokenHash String   @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
}